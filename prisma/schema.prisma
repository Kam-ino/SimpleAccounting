generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions  Transaction[]
  budgets       Budget[]
  savingsGoals  SavingsGoal[]
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  type        CategoryType
  color       String?
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  transactions  Transaction[]
  budgetCategories BudgetCategory[]
}

model Transaction {
  id          String      @id @default(cuid())
  amount      Float
  description String?
  date        DateTime    @default(now())
  type        TransactionType
  categoryId  String?
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])
}

model Budget {
  id          String   @id @default(cuid())
  name        String
  amount      Float
  spent       Float    @default(0)
  period      BudgetPeriod
  startDate   DateTime
  endDate     DateTime
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories   BudgetCategory[]
}

model BudgetCategory {
  id       String @id @default(cuid())
  budgetId String
  categoryId String
  amount   Float
  spent    Float  @default(0)

  budget   Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([budgetId, categoryId])
}

model SavingsGoal {
  id          String           @id @default(cuid())
  name        String
  targetAmount Float
  currentAmount Float          @default(0)
  startDate   DateTime         @default(now())
  targetDate  DateTime?
  description String?
  status      SavingsGoalStatus @default(ACTIVE)
  userId      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum CategoryType {
  INCOME
  EXPENSE
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum SavingsGoalStatus {
  ACTIVE
  COMPLETED
  PAUSED
}